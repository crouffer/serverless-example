# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: crouffer-serverless-example
# app and org for use with dashboard.serverless.com
org: chrisrouffer
app: crouffer-serverless-example

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.8
  environment:
    SSM_PARAMETER_S3_BUCKET_NAME:
      Ref : S3BucketSsmParameter
    SSM_PARAMETER_INBOUND_QUEUE_URL:
      Ref : InboundQueueUrlSsmParameter
    SSM_PARAMETER_SNS_TOPIC_ARN:
      Ref : SnsTopicArnSsmParameter    

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
            - ""
            - - !GetAtt ServerlessDeploymentBucket.Arn
              - "/*"
    - Effect: "Allow"
      Action:
        - "states:SendTaskFailure"
        - "states:SendTaskSuccess"
      # TODO: Fix this hardcoded value
      Resource: "arn:aws:states:us-east-1:033369359363:stateMachine:MonitorUnderscorestepUnderscorefunctionStepFunctionsStateMachine-1k8jFfmKuwgf"
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        Fn::Join:
          - ""
          - - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/"
            - !Ref S3BucketSsmParameter
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        Fn::Join:
          - ""
          - - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/"
            - !Ref InboundQueueUrlSsmParameter
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        Fn::Join:
          - ""
          - - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/"
            - !Ref SnsTopicArnSsmParameter
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        Fn::Join:
          - ""
          - - Fn::Sub: "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:"
            - !GetAtt SnsTopic.TopicName
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: !GetAtt InboundQueue.Arn
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  from_service_1:
    handler: handler.from_service_1
    environment:
      SERVICE_NAME: "from_service_1"
    events:
      - sns:
          arn: !Ref SnsTopicTestIncomingLambdas
          topicName: "TestIncomingLambdas"
  to_service_1:
    handler: handler.to_service_1
    environment:
      SERVICE_NAME: "to_service_1"
      SERVICE_QUEUE_URL:
        Ref: Service1Queue
    events:
      - sqs:
          arn: !GetAtt Service1Queue.Arn
  from_service_2:
    handler: handler.from_service_2
    environment:
      SERVICE_NAME: "from_service_2"
    events:
      - sns:
          arn: !Ref SnsTopicTestIncomingLambdas
          topicName: "TestIncomingLambdas"
  to_service_2:
    handler: handler.to_service_2
    environment:
      SERVICE_NAME: "to_service_2"
      SERVICE_QUEUE_URL:
        Ref: Service2Queue
    events:
      - sqs:
          arn: !GetAtt Service2Queue.Arn
  sync_service:
    handler: handler.sync_service
    events:
      - sqs:
          arn: !GetAtt InboundQueue.Arn
  health_check:
    handler: handler.health_check
    memorySize: 128
    timeout: 5
    events:
        - schedule: rate(1 minute)

# Documentation: https://www.serverless.com/plugins/serverless-step-functions
stepFunctions:
  validate: true
  stateMachines:
    monitor_step_function:
      events:
        - schedule:
            rate: rate(1 minute)
            enabled: true
      definition:
        StartAt: TestOutgoingLambdas
        States:
          TestOutgoingLambdas:
            Type: Parallel
            Next: TestIncomingLambdas
            Branches:
            - StartAt: TestToService1
              States:
                TestToService1:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  TimeoutSeconds: 30
                  Parameters:
                    QueueUrl:
                      Ref: InboundQueue
                    MessageBody:
                      # input.$: "$"
                      taskToken.$: "$$.Task.Token"
                      testTarget: "to_service_1"
                  End: true
            - StartAt: TestToService2
              States:
                TestToService2:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
                  TimeoutSeconds: 30
                  Parameters:
                    QueueUrl:
                      Ref: InboundQueue
                    MessageBody:
                      # input.$: "$"
                      taskToken.$: "$$.Task.Token"
                      testTarget: "to_service_2"
                  End: true
          TestIncomingLambdas:
            Type: Parallel
            Next: FinalState
            Branches:
              - StartAt: TestFromService1
                States:
                  TestFromService1:
                    Type: Task
                    Resource: arn:aws:states:::sns:publish.waitForTaskToken
                    TimeoutSeconds: 30
                    Parameters:
                      TopicArn:
                        Ref: SnsTopicTestIncomingLambdas
                      Message:
                        # input.$: "$"
                        taskToken.$: "$$.Task.Token"
                        testTarget: "from_service_1" # TODO: put names in custom object
                    End: true
              - StartAt: TestFromService2
                States:
                  TestFromService2:
                    Type: Task
                    Resource: arn:aws:states:::sns:publish.waitForTaskToken
                    TimeoutSeconds: 30
                    Parameters:
                      TopicArn:
                        Ref: SnsTopicTestIncomingLambdas
                      Message:
                        # input.$: "$"
                        taskToken.$: "$$.Task.Token"
                        testTarget: "from_service_2" # TODO: put names in custom object
                    End: true
          FinalState:
            Type: Pass
            End: true

          
      alarms:
        topics:
          ok: !Ref SnsTopicStepFunctionOk
          alarm: !Ref SnsTopicStepFunctionAlarm
          insufficientData: !Ref SnsTopicStepFunctionInsufficientData
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - metric: executionThrottled
            treatMissingData: breaching # overrides below default
          - executionsSucceeded
        treatMissingData: ignore # optional
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DeadLetterQueue:
      Type: AWS::SQS::Queue
    InboundQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy: 
          deadLetterTargetArn:
            Fn::GetAtt: DeadLetterQueue.Arn
          maxReceiveCount : 10
    InboundQueueUrlSsmParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Value: !Ref InboundQueue
    S3BucketSsmParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Value: !Ref ServerlessDeploymentBucket
    Service1Queue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy: 
          deadLetterTargetArn:
            Fn::GetAtt: DeadLetterQueue.Arn
          maxReceiveCount : 10
    Service1QueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SnsTopic
        Endpoint: !GetAtt Service1Queue.Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
    Service2Queue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy: 
          deadLetterTargetArn:
            Fn::GetAtt: DeadLetterQueue.Arn
          maxReceiveCount : 10
    Service2QueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SnsTopic
        Endpoint: !GetAtt Service2Queue.Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
    SnsTopic:
      Type: AWS::SNS::Topic
    SnsTopicArnSsmParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Value: !Ref SnsTopic
    SnsTopicStepFunctionOk:
      Type: AWS::SNS::Topic
    SnsTopicStepFunctionAlarm:
      Type: AWS::SNS::Topic
    SnsTopicStepFunctionInsufficientData:
      Type: AWS::SNS::Topic
    SnsTopicTestIncomingLambdas:
      Type: AWS::SNS::Topic
    QueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref Service1Queue
          - !Ref Service2Queue
        PolicyDocument:  {
          "Version": "2012-10-17",
          "Id": "Policy1596186813341",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": [
                "sqs:SendMessage",
                "sqs:SendMessageBatch"
              ],
              "Resource": [
                !GetAtt Service1Queue.Arn,
                !GetAtt Service2Queue.Arn,
              ]
            }
          ]
        }

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
